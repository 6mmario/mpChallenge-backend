pipeline {
    agent any

    environment {
        // Nombre de la imagen Docker; c√°mbialo si quieres otro repositorio/namespace
        IMAGE_NAME = "mpchallenge-backend"
        // Usamos la rama y el n√∫mero de build como etiqueta
        IMAGE_TAG  = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
        // URL de tu repositorio
        GIT_REPO   = "https://github.com/6mmario/mpChallenge-backend.git"
        // Ramo que vas a compilar
        GIT_BRANCH = "main"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Clonando ${GIT_REPO} (branch: ${GIT_BRANCH})..."
                // Hacemos checkout directo con la URL en lugar de checkout scm
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
            }
        }

        stage('Instalar dependencias') {
            steps {
                echo "üì• Instalando dependencias con npm..."
                // Si prefieres npm ci en vez de npm install, c√°mbialo aqu√≠
                sh 'npm install'
            }
        }

        stage('Ejecutar pruebas') {
            steps {
                echo "üß™ Corriendo tests..."
                // Asume que en package.json tienes "test": "jest" o similar
                sh 'npm test'
            }
        }

        stage('Compilar TypeScript') {
            steps {
                echo "üöß Compilando TypeScript..."
                // Asume que en package.json existe "build": "tsc -p tsconfig.json"
                sh 'npm run build'
            }
        }

        stage('Construir imagen Docker') {
            steps {
                echo "üê≥ Construyendo imagen Docker ${IMAGE_NAME}:${IMAGE_TAG}..."
                sh """
                   docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                """
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline finalizado con √©xito. Imagen: ${IMAGE_NAME}:${IMAGE_TAG}"
        }
        failure {
            echo "‚ùå Algo fall√≥ durante el pipeline."
        }
    }
}